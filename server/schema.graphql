### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

type Comment {
  author: User!
  content: String
  createdAt: DateTime
  dish: [Dish]!
  dishId: Int!
  id: Int!
  ownerId: Int!
}

type CommentPayload {
  comment: Comment
  success: Boolean
}

input CreateDishInput {
  dishType: DishType!
  image: String
  rating: RatingType!
  title: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Dish {
  author: User!
  comments: [Comment]!
  createdAt: DateTime!
  dishType: DishType!
  id: Int!
  image: String
  rating: RatingType!
  title: String!
}

type DishPayload {
  dish: Dish
  success: Boolean
}

"""Dish type enum"""
enum DishType {
  DESSERT
  MAIN
  SIDE
  STARTER
}

type Mutation {
  addComment(
    """comment content"""
    content: String!

    """dish id to specify this dish,added by an query variable"""
    dishId: Int!
  ): CommentPayload
  createDish(CreateDishInput: CreateDishInput!): Dish
  deleteDish(
    """dish id to be able to remove the dish"""
    id: Int
  ): DishPayload!
  login(
    """unique email argument """
    email: String

    """users password to be able to login """
    password: String
  ): AuthPayload
  register(Input: RegisterUserInput!): AuthPayload
  updateDish(UpdateDishInput: UpdateDishInput!): DishPayload
  updateMe(Input: UpdateMeInput): User
}

type Query {
  comments: [Comment]!
  dishById(id: Int): Dish
  dishes: [Dish]!
  filterDishes(searchString: String): [Dish]
  me: User
  users: [User]
}

"""enum to generating rating for the dish"""
enum RatingType {
  FIVE
  FOUR
  ONE
  THREE
  TWO
}

input RegisterUserInput {
  email: String!
  firstName: String!
  lastName: String
  password: String!
  role: UserRole
}

enum SortOrder {
  asc
  desc
}

"""input for updating an dish"""
input UpdateDishInput {
  dishType: DishType
  id: Int
  image: String
  rating: RatingType
  title: String
}

input UpdateMeInput {
  email: String
  firstName: String
  lastName: String
  password: String
}

type User {
  comments: [Comment]
  createdAt: DateTime!
  dishes: [Dish]
  email: String!
  firstName: String!
  id: Int!
  lastName: String
  password: String!
}

"""User role"""
enum UserRole {
  ADMIN
  USER
}
